apiVersion: install.istio.io/v1alpha2
kind: IstioControlPlane
spec:
  hub: docker.io/istio
  tag: 1.1.4
  defaultNamespace: istio-system

  # Traffic management feature
  trafficManagement:
    enabled: true
    components:
      namespace: istio-control

      pilot:
        common:
          k8s:
            env:
            - name: GODEBUG
              value: "gctrace=1"
            hpaSpec:
              maxReplicas: 5
              minReplicas: 1
              scaleTargetRef:
                apiVersion: apps/v1
                kind: Deployment
                name: istio-pilot
              metrics:
                - type: Resource
                  resource:
                    name: cpu
                    targetAverageUtilization: 80
            replicaCount: 1
            readinessProbe:
              httpGet:
                path: /ready
                port: 8080
              initialDelaySeconds: 5
              periodSeconds: 30
              timeoutSeconds: 5
            resources:
              requests:
                cpu: 500m
                memory: 2048Mi

          values:
            image: pilot
            traceSampling: 1.0
            configNamespace: istio-config
            keepaliveMaxServerConnectionAge: 30m
            configMap: true
            ingress:
              ingressService: istio-ingressgateway
              ingressControllerMode: "OFF"
              ingressClass: istio
            telemetry:
              enabled: false
            policy:
              enabled: false
            useMCP: false

      proxy:
        common:
          values:
            image: proxyv2
            clusterDomain: "cluster.local"
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 2000m
                memory: 128Mi
            concurrency: 2
            accessLogEncoding: TEXT
            logLevel: warning
            componentLogLevel: "misc:error"
            dnsRefreshRate: 300s
            privileged: false
            enableCoreDump: false
            statusPort: 15020
            readinessInitialDelaySeconds: 1
            readinessPeriodSeconds: 2
            readinessFailureThreshold: 30
            includeIPRanges: "*"
            autoInject: enabled
            tracer: "zipkin"

  # Policy feature
  policy:
    enabled: false
    components:
      namespace: istio-policy
      policy:
        common:
          k8s:
            replicaCount: 1
            hpaSpec:
              maxReplicas: 5
              minReplicas: 1
              scaleTargetRef:
                apiVersion: apps/v1
                kind: Deployment
                name: istio-policy
              metrics:
                - type: Resource
                  resource:
                    name: cpu
                    targetAverageUtilization: 80
            env:
              - name: GODEBUG
                value: "gctrace=1"
          values:
            image: mixer
            adapters:
              kubernetesenv:
                enabled: true

  # Telemetry feature
  telemetry:
    enabled: false
    components:
      namespace: istio-telemetry
      telemetry:
        common:
          k8s:
            env:
            - name: GODEBUG
              value: "gctrace=1"
            - name: GOMAXPROCS
              value: "6"
            hpaSpec:
              maxReplicas: 5
              minReplicas: 1
              scaleTargetRef:
                apiVersion: apps/v1
                kind: Deployment
                name: istio-telemetry
              metrics:
                - type: Resource
                  resource:
                    name: cpu
                    targetAverageUtilization: 80
            replicaCount: 1
            resources:
              requests:
                cpu: 1000m
                memory: 1G
              limits:
                cpu: 4800m
                memory: 4G
          values:
            image: mixer
            sessionAffinityEnabled: false
            loadshedding:
              mode: enforce
              latencyThreshold: 100ms
            adapters:
              stdio:
                enabled: false
                outputAsJson: false
              prometheus:
                enabled: true
                metricsExpiryDuration: 10m
              kubernetesenv:
                enabled: true
              stackdriver:
                enabled: false
              useAdapterCRDs: false

  # Security feature
  security:
    enabled: false
    components:
      namespace: istio-security

      citadel:
        common:
          values:
            image: citadel
            selfSigned: true # indicate if self-signed CA is used.
            trustDomain: cluster.local # indicate the domain used in SPIFFE identity URL
            dnsCerts:
              istio-pilot-service-account.istio-system: istio-pilot.istio-system

      certManager:
        common:
          values:
            replicaCount: 1
            hub: quay.io/jetstack
            tag: v0.6.2

      nodeAgent:
        common:
          values:
            image: node-agent-k8s
            env:
              CA_PROVIDER: ""
              CA_ADDR: ""
              Plugins: ""

  # Config management feature
  configManagement:
    enabled: false
    components:
      namespace: istio-control
      galley:
        common:
          k8s:
            replicaCount: 1
            resources:
              requests:
                cpu: 100m

  # Auto injection feature
  autoInjection:
    enabled: false
    components:
      namespace: istio-control
      injector:
        common:
          values:
            replicaCount: 1
            image: sidecar_injector
            enableNamespacesByDefault: false
            rewriteAppHTTPProbe: false
            selfSigned: false

  # Istio Gateway feature
  gateways:
    enabled: false
    components:
      ingressGateway:
          common:
            enabled: true
            namespace: istio-ingress
            k8s:
              replicaCount: 1
              hpaSpec:
                maxReplicas: 5
                minReplicas: 1
                scaleTargetRef:
                  apiVersion: apps/v1
                  kind: Deployment
                  name: istio-ingressgateway
                metrics:
                - type: Resource
                  resource:
                    name: cpu
                    targetAverageUtilization: 80
            values:
              autoscaleEnabled: true
              # Debug level for envoy. Can be set to 'debug'
              debug: info
              domain: ""
              # Enable cross-cluster access using SNI matching
              zvpn:
                enabled: true
                suffix: global
              # Domain name for telemetry addons
              telemetry_domain_name: ""
              env:
                # A gateway with this mode ensures that pilot generates an additional
                # set of clusters for internal services but without Istio mTLS, to
                # enable cross cluster routing.
                ISTIO_META_ROUTER_MODE: "sni-dnat"
              ports:
              ## You can add custom gateway ports in user values overrides, but it must include those ports since helm replaces.
              # Note that AWS ELB will by default perform health checks on the first port
              # on this list. Setting this to the health check port will ensure that health
              # checks always work. https://github.com/istio/istio/issues/12503
              - port: 15020
                targetPort: 15020
                name: status-port
              - port: 80
                targetPort: 80
                name: http2
              - port: 443
                name: https
              - port: 15029
                targetPort: 15029
                name: kiali
              - port: 15030
                targetPort: 15030
                name: prometheus
              - port: 15031
                targetPort: 15031
                name: grafana
              - port: 15032
                targetPort: 15032
                name: tracing
                # This is the port where sni routing happens
              - port: 15443
                targetPort: 15443
                name: tls
              #### MESH EXPANSION PORTS  ########
              # Pilot and Citadel MTLS ports are enabled in gateway - but will only redirect
              # to pilot/citadel if global.meshExpansion settings are enabled.
              # Delete these ports if mesh expansion is not enabled, to avoid
              # exposing unnecessary ports on the web.
              # You can remove these ports if you are not using mesh expansion
              meshExpansionPorts:
              - port: 15011
                targetPort: 15011
                name: tcp-pilot-grpc-tls
              - port: 8060
                targetPort: 8060
                name: tcp-citadel-grpc-tls
              - port: 853
                targetPort: 853
                name: tcp-dns-tls
              ####### end MESH EXPANSION PORTS ######
              ##############
              secretVolumes:
              - name: ingressgateway-certs
                secretName: istio-ingressgateway-certs
                mountPath: /etc/istio/ingressgateway-certs
              - name: ingressgateway-ca-certs
                secretName: istio-ingressgateway-ca-certs
                mountPath: /etc/istio/ingressgateway-ca-certs
              # Telemetry addon gateways example config
              telemetry_addon_gateways:
                tracing_gateway:
                  name: tracing
                  port: 15032
                  desPort: 80
                  enabled: false
                  tls: false
                kiali_gateway:
                  name: kiali
                  port: 15029
                  desPort: 20001
                  enabled: false
                  tls: false
                grafana_gateway:
                  name: grafana
                  port: 15031
                  desPort: 3000
                  enabled: false
                  tls: false
                prometheus_gateway:
                  name: prometheus
                  port: 15030
                  desPort: 9090
                  enabled: false
                  tls: false
      egressGateway:
          common:
            enabled: false
            namespace: istio-egress
            k8s:
              replicaCount: 1
              hpaSpec:
                maxReplicas: 5
                minReplicas: 1
                scaleTargetRef:
                  apiVersion: apps/v1
                  kind: Deployment
                  name: istio-egressgateway
                metrics:
                  - type: Resource
                    resource:
                      name: cpu
                      targetAverageUtilization: 80
            values:
              autoscaleEnabled: true
              # Enable cross-cluster access using SNI matching.
              # Make sure you set suffix if deploying multiple egress gateways.
              zvpn:
                # Must be different for each egress namespace.
                # Used to control the domain name suffix for zero vpn routing.
                # Domain names ending with this suffix will be routed to this egress gateway
                # automatically.
                # This can be a real domain name ( istio.example.com )
                suffix: global
                enabled: true
              drainDuration: 45s
              connectTimeout: 10s
              env:
                # Set this to "external" if and only if you want the egress gateway to
                # act as a transparent SNI gateway that routes mTLS/TLS traffic to
                # external services defined using service entries, where the service
                # entry has resolution set to DNS, has one or more endpoints with
                # network field set to "external". By default its set to "" so that
                # the egress gateway sees the same set of endpoints as the sidecars
                # preserving backward compatibility
                # ISTIO_META_REQUESTED_NETWORK_VIEW: ""
                # A gateway with this mode ensures that pilot generates an additional
                # set of clusters for internal services but without Istio mTLS, to
                ISTIO_META_ROUTER_MODE: "sni-dnat"
              ports:
              - port: 80
                name: http2
              - port: 443
                name: https
                # This is the port where sni routing happens
              - port: 15443
                targetPort: 15443
                name: tls
              secretVolumes:
              - name: egressgateway-certs
                secretName: istio-egressgateway-certs
                mountPath: /etc/istio/egressgateway-certs
              - name: egressgateway-ca-certs
                secretName: istio-egressgateway-ca-certs
                mountPath: /etc/istio/egressgateway-ca-certs

  # Global values passed through to helm global.yaml.
  values:
    logging:
      level: "default:info"
    k8sIngress:
      enabled: false
      gatewayName: ingressgateway
      enableHttps: false
    proxy_init:
      image: proxy_init
    imagePullPolicy: Always
    controlPlaneSecurityEnabled: true
    disablePolicyChecks: true
    policyCheckFailOpen: false
    enableTracing: true
    mtls:
      enabled: false
    arch:
      amd64: 2
      s390x: 2
      ppc64le: 2
    oneNamespace: false
    configValidation: true
    defaultResources:
      requests:
        cpu: 10m
    defaultPodDisruptionBudget:
      enabled: true
    useMCP: true
    outboundTrafficPolicy:
      mode: ALLOW_ANY
  # TODO: remove requirement to set these to nil values. This is an issue with helm charts.
    meshExpansion: {}
    multiCluster: {}
    sds:
      enabled: false
      udsPath: ""
      useTrustworthyJwt: false
      useNormalJwt: false
    tracer:
      lightstep:
        address: ""
        accessToken: ""
        secure: true
        cacertPath: ""
      zipkin:
        address: ""
      datadog:
        address: "$(HOST_IP):8126"
